var path = require('path');
var fs = require('fs');
function init(modules) {

  function create(info) {
    // only install if we are in an SFCC project; we just support cwd
    let currentPath = process.cwd();
    let isSFCC = false;
    const dwJson = path.join(currentPath, 'dw.json');
    const dwJs = path.join(currentPath, 'dw.js');
    try {
      if (fs.existsSync(dwJs) || fs.existsSync(dwJson)) {
        info.project.projectService.logger.info(`[nvim-sfcc] Found SFCC project at ${currentPath}`);
        isSFCC = true;
      }
    } catch (error) {}

    // typescript v5.x - anything lower is not supported
    if (isSFCC && info.languageServiceHost.resolveModuleNameLiterals) {
      const languageServiceHost = info.languageServiceHost;
      const _resolveModuleNameLiterals =
        info.languageServiceHost.resolveModuleNameLiterals.bind(
          info.languageServiceHost,
        );

      languageServiceHost.resolveModuleNameLiterals = (
        moduleLiterals,
        containingFile,
        ...rest
      ) => {
        info.project.projectService.logger.info(`[nvim-sfcc] ${moduleLiterals} ${containingFile}`);

        moduleLiterals = moduleLiterals.map(moduleLiteral => {
          const moduleName = moduleLiteral.text;

          info.project.projectService.logger.info(`[nvim-sfcc] ${moduleName}`);
          if (moduleName.startsWith('*/')) {
            // TODO: search actual cartridge path to find the module; for now use tsconfig.json
            const target = `@cartridges/${moduleName.substring(2)}`;
            info.project.projectService.logger.info(`[nvim-sfcc] Rewrote module name "${moduleName}" to "${target}"`);
            moduleLiteral.text = target;
          } else if (moduleName.startsWith('~/')) {
            // search in current cartridge
            let currentPath = path.dirname(containingFile);

            while (currentPath !== path.parse(currentPath).root) {
              const projectFilePath = path.join(currentPath, '.project');

              try {
                if (fs.existsSync(projectFilePath)) {
                  const targetModule = path.join(currentPath, moduleName.substring(2));
                  info.project.projectService.logger.info(`[nvim-sfcc] Rewrote cartridge-relative "${moduleName}" to "${targetModule}"`);
                  moduleLiteral.text = targetModule;
                }

                // Move up one directory
                currentPath = path.dirname(currentPath);
              } catch (error) {}
            }
          } else if (false) {
            // TODO: path starts with a known cartridge name; for now use tsconfig.json
          } else if (false) { 
            // TODO: modules; for now use tsconfig.json
          }
          return moduleLiteral;
        });

        return _resolveModuleNameLiterals(
          moduleLiterals,
          containingFile,
          ...rest,
        );
      };
    }

    return info.languageService;
  }

  return { create };
}

module.exports = init;
